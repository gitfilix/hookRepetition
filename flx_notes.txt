flx notes

useState

useState always returns an array with two elements: 
1. element: state snapshot (current state /or updated state) (->pointer at state)
2. element: A Function for updateing this state 

the state will be managed by react behind the scenes


rules:
use on the root-level at a component. 
(not allowed in a for loop, in a if statement below)


https://hookrepetition-default-rtdb.europe-west1.firebasedatabase.app/


useEffect

1. executes: After every render cycle!
2. [] empty dependency array acts like componentDidMount onliy runs ONCE (after first render)

useReducer:
when working with useReducer, React will re-render the component wehnever your reducer returns a new state

const httpReducer = (prevHttpState, action) => {
  switch(action.type) {
    case 'SEND':
      return { loading: true, error: null }
    case 'RESPONSE':
      return { ...prevHttpState, loading: false }   <- here: copy the return state - so its updated
    case 'ERROR':
      return { loading: false, error: action.errorMessage }
    case 'CLEAR':
      return { ...prevHttpState, error: null }
      default: throw new Error('httpReducer unknown Error - should not be reached.')
  }
}

called by:
// [state, dispatch fn] = useReducer(reducername {initial state: here objc}) 
const [ httpState, dispatchHttp] = useReducer(httpReducer, { loading: false, error: null})


useContext()


useCallback() 
is for saving a function that doesnt change. 


useMemo()
stores a value. memorizing components. Returns a memoized value.









